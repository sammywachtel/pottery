#!/bin/bash

# Supabase Local Development Setup Script
# Sets up Supabase local stack using Docker for development

set -e

echo "🚀 Setting up Supabase Local Development Environment..."
echo "================================================================"

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo "❌ Docker is not running. Please start Docker and try again."
    exit 1
fi

# Check if Supabase CLI is installed
if ! command -v supabase &> /dev/null; then
    echo "📥 Installing Supabase CLI..."

    # Install Supabase CLI based on OS
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        curl -fsSL https://supabase.com/install.sh | sh
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        if command -v brew &> /dev/null; then
            brew install supabase/tap/supabase
        else
            echo "❌ Homebrew not found. Please install Homebrew first:"
            echo "   /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
            exit 1
        fi
    else
        echo "❌ Unsupported OS. Please install Supabase CLI manually:"
        echo "   https://supabase.com/docs/guides/cli"
        exit 1
    fi
fi

echo "✅ Supabase CLI is installed"

# Initialize Supabase project (if not already initialized)
if [ ! -d "supabase" ]; then
    echo "🔧 Initializing Supabase project..."
    supabase init
else
    echo "✅ Supabase project already initialized"
fi

# Start Supabase local stack
echo "🚀 Starting Supabase local stack..."
supabase start

# Wait for services to be ready
echo "⏳ Waiting for services to be ready..."
sleep 10

# Get local configuration
echo "📋 Local Supabase Configuration:"
echo "================================"
supabase status

# Create local configuration file
echo "📝 Creating local environment configuration..."
cat > .env.supabase.local.generated << EOF
# Generated Supabase Local Configuration
# This file was automatically generated by setup_supabase_local.sh

# Supabase Local Stack URLs
SUPABASE_URL=http://localhost:54321
SUPABASE_ANON_KEY=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0  # pragma: allowlist secret
SUPABASE_SERVICE_ROLE_KEY=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU  # pragma: allowlist secret

# Database Connection
DATABASE_URL=postgresql://postgres:postgres@localhost:54322/postgres  # pragma: allowlist secret

# Storage Configuration
SUPABASE_STORAGE_URL=http://localhost:54321/storage/v1
STORAGE_BUCKET_NAME=pottery-photos

# Authentication
USE_SUPABASE_AUTH=true
SUPABASE_JWT_SECRET=super-secret-jwt-token-with-at-least-32-characters-long

# Local Development Settings
DEBUG_MODE=true
ENABLE_QUERY_LOGGING=true
PORT=8000

# Database Backend Selection
DATABASE_BACKEND=supabase
EOF

echo "✅ Configuration saved to .env.supabase.local.generated"

# Run initial database migrations
echo "🗄️  Setting up database schema..."
if [ -f "supabase/migrations/001_initial_schema.sql" ]; then
    echo "✅ Migration files already exist"
else
    echo "📝 Creating initial migration..."
    mkdir -p supabase/migrations

    cat > supabase/migrations/001_initial_schema.sql << 'EOF'
-- Initial schema for Pottery Catalog Application
-- Generated by setup_supabase_local.sh

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create pottery_items table
CREATE TABLE pottery_items (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id TEXT NOT NULL,
    name TEXT NOT NULL,
    clay_type TEXT NOT NULL,
    glaze TEXT,
    location TEXT NOT NULL,
    note TEXT,
    created_datetime TIMESTAMPTZ NOT NULL,
    created_timezone TEXT,
    measurements JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create photos table
CREATE TABLE photos (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    item_id UUID NOT NULL REFERENCES pottery_items(id) ON DELETE CASCADE,
    user_id TEXT NOT NULL,
    stage TEXT NOT NULL,
    image_note TEXT,
    file_name TEXT,
    storage_path TEXT NOT NULL,
    uploaded_at TIMESTAMPTZ DEFAULT NOW(),
    uploaded_timezone TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX idx_pottery_items_user_id ON pottery_items(user_id);
CREATE INDEX idx_pottery_items_created_at ON pottery_items(created_at);
CREATE INDEX idx_photos_item_id ON photos(item_id);
CREATE INDEX idx_photos_user_id ON photos(user_id);

-- Enable Row Level Security (RLS)
ALTER TABLE pottery_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE photos ENABLE ROW LEVEL SECURITY;

-- RLS Policies for Supabase auth
CREATE POLICY "Users can only access their own items" ON pottery_items
    FOR ALL USING (auth.uid()::text = user_id);

CREATE POLICY "Users can only access their own photos" ON photos
    FOR ALL USING (auth.uid()::text = user_id);

-- Create storage bucket for photos
INSERT INTO storage.buckets (id, name, public)
VALUES ('pottery-photos', 'pottery-photos', false)
ON CONFLICT (id) DO NOTHING;

-- Storage policy for pottery photos
CREATE POLICY "Users can upload their own photos" ON storage.objects
    FOR INSERT TO authenticated
    WITH CHECK (bucket_id = 'pottery-photos' AND auth.uid()::text = (storage.foldername(name))[1]);

CREATE POLICY "Users can view their own photos" ON storage.objects
    FOR SELECT TO authenticated
    USING (bucket_id = 'pottery-photos' AND auth.uid()::text = (storage.foldername(name))[1]);

CREATE POLICY "Users can delete their own photos" ON storage.objects
    FOR DELETE TO authenticated
    USING (bucket_id = 'pottery-photos' AND auth.uid()::text = (storage.foldername(name))[1]);
EOF

    echo "✅ Initial migration created"
fi

# Apply migrations
echo "⚡ Applying database migrations..."
supabase db reset

# Create test data (optional)
echo "🧪 Creating test data..."
cat > /tmp/test_data.sql << 'EOF'
-- Insert test user and data for development
-- Note: In real usage, users would be created through Supabase Auth

-- Test pottery item
INSERT INTO pottery_items (
    id,
    user_id,
    name,
    clay_type,
    glaze,
    location,
    note,
    created_datetime,
    created_timezone
) VALUES (
    '550e8400-e29b-41d4-a716-446655440000',
    'test-user-123',
    'Test Ceramic Bowl',
    'Stoneware',
    'Celadon Green',
    'Studio A, Shelf 3',
    'First attempt at glazing',
    NOW(),
    'America/New_York'
);

-- Test photo
INSERT INTO photos (
    id,
    item_id,
    user_id,
    stage,
    image_note,
    file_name,
    storage_path
) VALUES (
    '550e8400-e29b-41d4-a716-446655440001',
    '550e8400-e29b-41d4-a716-446655440000',
    'test-user-123',
    'bisque',
    'After first firing',
    'bowl_bisque.jpg',
    'test-user-123/550e8400-e29b-41d4-a716-446655440001.jpg'
);
EOF

# Apply test data
psql "postgresql://postgres:postgres@localhost:54322/postgres" -f /tmp/test_data.sql  # pragma: allowlist secret
rm /tmp/test_data.sql

echo "✅ Test data created"

# Show final status
echo ""
echo "🎉 Supabase Local Development Environment Ready!"
echo "================================================"
echo ""
echo "📋 Access Information:"
echo "  • API URL: http://localhost:54321"
echo "  • Database URL: postgresql://postgres:postgres@localhost:54322/postgres"  # pragma: allowlist secret
echo "  • Studio (GUI): http://localhost:54323"
echo "  • InBucket (Email): http://localhost:54324"
echo ""
echo "🔑 Authentication Keys:"
echo "  • Anon Key: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0"  # pragma: allowlist secret
echo "  • Service Role Key: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU"  # pragma: allowlist secret
echo ""
echo "📝 Next Steps:"
echo "  1. Copy .env.supabase.local.generated to .env.local"
echo "  2. Update your application to use DATABASE_BACKEND=supabase"
echo "  3. Test your application with: python main.py"
echo "  4. Run migration validation: python scripts/run_migration.py validate"
echo ""
echo "🛑 To stop Supabase:"
echo "   supabase stop"
echo ""
echo "🔄 To restart Supabase:"
echo "   supabase start"
echo ""
